Сначала был реализован подход с тонкой синхронизацией (после грубой разумеется).
Для данной задачи он оказался неудачный по времени и даже проигрывал грубой, потому что с большой вероятностью приложение тратило значительно времени на захват/освобождение мьютексов (это 
довольно дорогие операции, а их приходится делать при каждом переходе на новую вершину). И просто ожидать своей очереди, чтоб поработать с деревом (как в грубой) оказалось эффективней.
При чем при увеличении числа вершин в дереве, все становилось только хуже (при 100000 вершин нам в среднем надо сделать log 100000 операций захвата/освобождения мьютекса).
Далее была реализована оптимистичная синхронизация. Она оказалась намного эффективнее. При увеличении числа вершин эффективность не теряется (да, при большом количестве потоков, которые
хотят вставить вершину наша оптимистичная надежда на то, что никакие два не захотят присоединить ее к одной вершине, казалось бы падает, но в то же время вершин становится больше и 
вероятность конфликта остается та же).
Конкретные замеры для некоторого числа вершин в среднем (время в миллисекундах, замер с помощью stopwatch):
1) 1000 вершин
грубая - 40
тонкая - 45
оптимистичная - 35
2) 10000 вершин
грубая - 180
тонкая - 240
оптимистичная - 45
3) 100000 вершин
грубая - 1800
тонкая - 2600
оптимистичная - 120
4) 1000000 вершин
грубая - 34000
тонкая - 62000
оптимистичная - 2500
